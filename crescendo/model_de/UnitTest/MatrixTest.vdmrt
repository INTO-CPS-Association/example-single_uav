class MatrixTest is subclass of TestCase

values 

	row1 : seq of real = [1, 1, 1];
	row2 : seq of real = [2, 2, 2];
	row3 : seq of real = [3, 3, 3];
	row4 : seq of real = [2, 3];
	row5 : seq of real = [4, 5];
	row6 : seq of real = [6, 7];
	row7 : seq of real = [6, 7, 8, 9];
	row8 : seq of real = [2, 3, 4, 5];
	row9 : seq of real = [1, 1, 2, 2, 3, 3];
	
	m1 : Matrix`matrix = [row1, row2, row3];
	m2 : Matrix`matrix = [row1, row2];
	--m3 : Matrix`matrix = [row1, row1, row2, row2, row3, row3];
	m4 : Matrix`matrix = [row2, row3];
	m5 : Matrix`matrix = [row4, row5, row6];
	m6 : Matrix`matrix = [row7, row8];
	m7 : Matrix`matrix = [row1, row2, row3, row3];
	m8 : Matrix`matrix = [[1,2],[3,4]];
	m9 : Matrix`matrix = [[1],[2]];
	
	res1 : seq of real = [2, 2, 2];
	res2 : seq of real = [4, 4, 4];
	res3 : seq of real = [6, 6, 6];
	res4 : seq of real = [24, 30];
	res5 : seq of real = [36, 45];
	res6 : seq of real = [71, 71, 71];
	res7 : seq of real = [35, 35, 35];
	res8 : seq of real = [30, 35, 40, 45];
	res9 : seq of real = [10, 15, 20, 25];
	res10 : seq of real = [2, 2, 2, 4, 4, 4, 6, 6, 6];
	
	resM : Matrix`matrix = [res1, res2, res3];
	resM2 : Matrix`matrix = [res1, res2];
	resM3 : Matrix`matrix = [res1, res1, res2, res2, res3, res3];
	resM4 : Matrix`matrix = [res4, res5];
	resM5 : Matrix`matrix = [res6, res7];
	resM6 : Matrix`matrix = [row9, row9, row9];
	resM7 : Matrix`matrix = [res8, res9];
	resM8 : Matrix`matrix = [[5],[11]];
	
operations
	
	
	protected testAdd: () ==> ()
	testAdd () == (
		
		let res : Matrix`matrix = Matrix`add(m1,m1) in
		assertTrue(res = resM);
	);
	
	protected testAdd2: () ==> ()
	testAdd2 () == (
		
		let res : Matrix`matrix = Matrix`add(m2,m2) in
		assertTrue(res = resM2);
	);
	
	--protected testAdd3: () ==> ()
	--testAdd3 () == (
		
		--let res : Matrix`matrix = Matrix`add(m3,m3) in
		--assertTrue(res = resM3);
	--);
	
	protected testMultiply: () ==> ()
	testMultiply () == (
		
		let res: Matrix`matrix = Matrix`multiply(m4,m5) in
		assertTrue(res = resM4);		
	
	);
	
	protected testMultiply2: () ==> ()
	testMultiply2 () == (
		
		let res: Matrix`matrix = Matrix`multiply(m6,m7) in
		assertTrue(res = resM5);		
	
	);
	
	protected testMultiply3: () ==> ()
	testMultiply3 () == (
		
		let res: Matrix`matrix = Matrix`multiply(m8,m9) in
		assertTrue(res = resM8);		
	
	);
	
--	protected testTranspose: () ==> ()
--	testTranspose () == (
		
--		let res: Matrix`matrix = Matrix`transpose(m3) in
--		assertTrue(res = resM6);		
--	);
	
--	protected testTranspose2: () ==> ()
--	testTranspose2 () == (
		
--		let res: Matrix`matrix = Matrix`transpose(resM6) in
--		assertTrue(res = m3);		
--	);
	
--	protected testTranspose3: () ==> ()
--	testTranspose3 () == (
		
--		let res: Matrix`matrix = Matrix`transpose(Matrix`transpose(m3)) in
--		assertTrue(res = m3);		
--	);
	
	protected testMultiplyScalar: () ==> ()
	testMultiplyScalar () == (
		
		let res: Matrix`matrix = Matrix`multiplyScalar(m6,5) in
		assertTrue(res = resM7)
	);
	
	protected testAsSequence: () ==> ()
	testAsSequence () == (
		
		let res: seq of real = Matrix`asSequence(resM) in
		assertTrue(res = res10)
	);

end MatrixTest