class Attitude

instance variables
	posControl : AC_PosControl;
	motors : AP_Motors;
	insNav : AP_InertialNav_NavEKF;
	throttleAverage : real := 0;

operations
	public Attitude : AC_PosControl * AP_Motors * AP_InertialNav_NavEKF ==> Attitude
	Attitude(pos, motor, nav) ==
	(
		posControl := pos;
		motors := motor;
		insNav := nav;
	);

	public updateThresholdAverage: () ==> ()
	updateThresholdAverage() == 
	(
		if throttleAverage = 0 then
		(-- TODO: Change to AP_Motors?
			throttleAverage := AP_MotorsQuad`THROTTLE_HOVER;
			posControl.setThrottleHover(throttleAverage);
		);
		
		let throttle : real = motors.getThrottle() in 
		let climbRate : real = insNav.getVelocity().z in
		(
			--IO`printf("1: Throttle Average: %s, climbRate: %s\n",[throttleAverage,climbRate]);
			if throttle > AP_MotorsQuad`THROTTLE_MIN and abs(climbRate) < 60 	then -- TODO: add AHRS roll and pitch!
			(
				--IO`printf("2: Throttle Average: %s, throttle: %s\n",[throttleAverage,throttle]);
				throttleAverage := throttleAverage * 0.99 + throttle * 0.01;
				
				--IO`printf("3: Throttle Average: %s, climbRate: %s\n",[throttleAverage,climbRate]);
				posControl.setThrottleHover(throttleAverage);
			);
		);
	);

end Attitude