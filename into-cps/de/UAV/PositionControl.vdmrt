class PositionControl
values
	P_GAIN_VALUE_THROTTLE = 5.0; -- Used for pController. This value is 
	HOLD_ALTITUDE_THROTTLE = 87; -- The throttle value required for the drone to hold its altitude in perfect conditions.
	FULL_THROTTLE = 100;
	MAX_TOP_THROTTLE_GAIN  = FULL_THROTTLE - HOLD_ALTITUDE_THROTTLE;
	-- Controllers: 
	PID_P = 5;
	PID_I = 0.1;
	PID_D = 1000;
	


	
instance variables
	sensorData : SF_GPS;
	pController : P := new P(P_GAIN_VALUE_THROTTLE);
	pidController : PID := new PID(PID_P, PID_I, PID_D, UAV`MAIN_LOOP_RATE);
	targetPoint : Types`Vector3;
	
operations
	public PositionControl : SF_GPS ==> PositionControl
	PositionControl(gps) == sensorData := gps;
	
	public setTargetPosition : Types`Vector3 ==> ()
	setTargetPosition(z) == ( 
		targetPoint:=z;
		pController.setTargetPoint(z.z);
		pidController.setTargetPoint(z.z);
	);
	
	public getPosition : () ==> Types`Vector3
	getPosition() == return sensorData.getPosition();
	
	public withinBounds : Types`Vector3 * Types`Vector3 ==> bool
	withinBounds(pos1, pos2) == (
		return abs(pos1.z - pos2.z) < 0.5; 
	);
	
	
	public update : () ==> Types`MotorCommand
	update() == (
		-- Get altitude
		let altitude = sensorData.getPosition().z,
		-- Get the proportional gain
			--p = pController.getP(altitude),
			p = pidController.update(altitude),
			throttle = (
				-- Convert the proportional gain into a throttle value
					if p > MAX_TOP_THROTTLE_GAIN then
						-- set full throttle
						FULL_THROTTLE
					else (

						let newThrottle = HOLD_ALTITUDE_THROTTLE + p in
							if newThrottle < 0
							then 0
							else newThrottle
					)
			) in (
				IO`printf("throttle: %3$s HOLD_ALTITUDE_THROTTLE: %1$s  p: %2$s\n",[HOLD_ALTITUDE_THROTTLE, p, throttle]);
				return mk_Types`MotorCommand(0,0,0,throttle);					
			);
	);
	
end PositionControl