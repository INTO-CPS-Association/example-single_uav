class AP_Motors

values
	protected maxMotors: nat = 4;

instance variables
	protected current : real := 0;
	protected voltage : real := 0;
	
	protected roll : real := 0;
	protected pitch : real := 0;
	protected yaw : real := 0;
	protected throttle : real := 1000;
	
	protected rollFactor 	: seq of real := [0*i|i in set {1,...,maxMotors}];
	protected pitchFactor 	: seq of real := [0*i|i in set {1,...,maxMotors}];
	protected yawFactor 	: seq of real := [0*i|i in set {1,...,maxMotors}];
	
operations
	public output : () ==> ()
	output() == (
		-- TODO:
		-- update max throttle
		-- update battery resistance
	    -- calc filtered battery voltage and lift_max
	    -- move throttle_low_comp towards desired throttle low comp
	    -- output to motors
	    output_armed();
    	skip
    );
    
    public setCurrent : real ==> ()
    setCurrent(curr) == (
    	current := curr;
    );
    
    public setVoltage : real ==> ()
    setVoltage(vol) == (
    	voltage := vol;
    );
    
    public setRoll: real ==> ()
    setRoll(input) == roll := input;
    
    public setPitch: real ==> ()
    setPitch(input) == pitch := input;
    
    public setYaw: real ==> ()
    setYaw(input) == yaw := input;
    
    public setThrottle: real ==> ()
    setThrottle(input) == throttle := input + 1000; -- Convert from servo_out to radio_out (Servo range: 0-1000, radio range: 1000-2000)
    
    public getThrottle: () ==> real
    getThrottle() == return throttle - 1000; -- Convert from radio_out to servo_out (Servo range: 0-1000, radio range: 1000-2000)
    
    public getRollPitchLimit: () ==> bool
    getRollPitchLimit() == (
    	-- TODO: limit flags: struct AP_Motors_limit
    	return false;
    );
    
    public getYawLimit: () ==> bool
    getYawLimit() == (
    	-- TODO: limit flags: struct AP_Motors_limit
    	return false;
    );
    
    public output_armed : () ==> ()
    output_armed() == is subclass responsibility
    
end AP_Motors