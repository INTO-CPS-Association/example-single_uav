class DerivativeFilter is subclass of FilterWithBuffer

instance variables
	-- oldest timestamp is placed first.
	timestamps : seq of real;

	newData : bool := false;
	lastSlope : real := 0;
	
operations
	public DerivativeFilter: (real) ==> DerivativeFilter
	DerivativeFilter(FilterSize) == (
		timestamps := [0*i | i in set {1,...,FilterSize}];
		FilterWithBuffer(FilterSize);
	);

	public update: real * nat ==> ()
	update(sample, timestamp) == (
		-- This is not a new timestamp - ignore
		if timestamps(len timestamps) = timestamp then
			return;
		
		timestamps := tl timestamps ^ [timestamp];
		
		apply(sample);
		
		newData := true;
	);
	
	public slope: () ==> real
	slope() == (
		if not newData then
			return lastSlope;
		
		-- Buffer not filled yet
		if timestamps(1) = timestamps(2) then
			return 0; 
		
		-- TODO: Support different filter size than 7 
		 let result = (2*5*(samples(5) - samples(1)) / (timestamps(5) - timestamps(1))
                	 + 4*4*(samples(6) - samples(2)) / (timestamps(6) - timestamps(2))
                 	 + 6*1*(samples(7) - samples(3)) / (timestamps(7) - timestamps(3)))/32 in
        	
        	-- TODO: Test for nan/inf ??
			lastSlope := result;
		
		newData := false;
		return lastSlope;
	);
	
end DerivativeFilter