class Matrix

types
	
	-- A matrix is defined as follows: M(rows)(columns)
	
	public vect = seq of real;
	
	public matrix = seq of vect;
	
operations
	public static zero : real * real ==> matrix
	zero(rows,columns) ==
	(	
		let row: vect = [0|n in set {1,...,columns}],
		 	m: matrix = [row| n in set {1,...,rows}] in
		  return m;
	);
	
	public static initValue : real * real * real ==> matrix
	initValue(rows,columns,value) ==
	(	
		let row: vect = [value|n in set {1,...,columns}],
		 	m: matrix = [row| n in set {1,...,rows}] in
		  return m;
	);

	public static add : matrix * matrix ==> matrix
	add(m1,m2) ==
	(	
		dcl row: seq of real := [0|n in set inds(hd(m1))],
			m3: seq of seq of real := [row| n in set inds(m1)];
		
		for rowIt = 1 to len(m1) do
		(
			for colIt = 1 to len(hd(m1)) do
			(
				row(colIt) := m1(rowIt)(colIt) + m2(rowIt)(colIt);
			);
			
			m3(rowIt) := row;
		);
		return m3;
	)
	pre equalSize(m1,m2);
	
	public static subtract : matrix * matrix ==> matrix
	subtract(m1,m2) ==
	(
		dcl row: seq of real := [0|n in set inds(hd(m1))],
			m3: seq of seq of real := [row| n in set inds(m1)];
		
		for rowIt = 1 to len(m1) do
		(
			for colIt = 1 to len(hd(m1)) do
			(
				row(colIt) := m1(rowIt)(colIt) - m2(rowIt)(colIt);
			);
			
			m3(rowIt) := row;
		);
		
		return m3;
	)
	pre equalSize(m1,m2);
	
	public static multiply : matrix * matrix ==> matrix
	multiply(m1,m2) ==
	(
		dcl row: seq of real := [0.0|n in set inds(hd(m2))],
			m3: seq of seq of real := [row| n in set inds(m1)];	
		
		for rowIt = 1 to len(m1) do -- Row information is taken from the left matrix (m1)
		(
			for colIt = 1 to len(hd(m2)) do -- Column information is taken from the right matrix (m2)
			(
				for sumIt = 1 to len(hd(m1)) do
				(
					m3(rowIt)(colIt) := m3(rowIt)(colIt) + m1(rowIt)(sumIt) * m2(sumIt)(colIt);
				);
			);
		);
		return m3;
	)
	pre doTheyMultiply(m1,m2);
	
	public static multiplyScalar : matrix * real ==> matrix
	multiplyScalar(m,s) ==
	(
		dcl row: seq of real := [0|n in set inds(hd(m))],
			mRes: seq of seq of real := [row| n in set inds(m)];
			
		for rowIt = 1 to len(m) do
		(
			for colIt = 1 to len(hd(m)) do
			(
				mRes(rowIt)(colIt) := m(rowIt)(colIt) * s;
			);
		);
		
		return mRes;
	)
	pre m <> [];
	
	public static transpose : matrix ==> matrix
	transpose(m) ==
	(
		dcl row: seq of real := [0|n in set inds(m)],
		mRes: seq of seq of real := [row| n in set inds(hd(m))],
		nRow: vect := [];
			
			for rowIt = 1 to len(hd(m)) do
			(
				for colIt = 1 to len(m) do
				(
					nRow := nRow ^ [m(colIt)(rowIt)]; 
				);
				mRes(rowIt) := nRow;
				nRow := [];
				
			);
			
		return mRes;
	)
	pre m <> [];

	public static asSequence : matrix ==> seq of real
	asSequence(m) ==
	(
		return conc m;
	);
	
functions

	equalSize: matrix * matrix -> bool
	equalSize(m1,m2) ==
	len(m1) = len(m2) 
	and forall it1, it2 in set elems(m1 ^ m2) & len(it1) = len(it2) 
	and forall it in set elems(m1 ^ m2) & it <> [];
	
	doTheyMultiply: matrix * matrix -> bool
	doTheyMultiply(m1,m2) ==
	len(hd(m1)) = len(m2) and m1 <> [] and m2 <> [];

	
 

end Matrix