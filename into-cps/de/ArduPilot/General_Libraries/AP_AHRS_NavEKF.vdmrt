class AP_AHRS_NavEKF is subclass of AP_AHRS_DCM 

instance variables
	EKF : AP_NavEKF;

operations
	public AP_AHRS_NavEKF: AP_InertialSensor * AP_Baro * AP_GPS ==> AP_AHRS_NavEKF
	AP_AHRS_NavEKF(i, b, g) == (
	 	ins := i;
		baro := b;
		gps := g;
		
		EKF := new AP_NavEKF(self, baro);
	);
	
	public update : () ==> ()
	update() == (
		-- Update AHRS_DCM
		dcmUpdate();
		
		-- TODO:
		-- Start EKF 10 sec after boot
		
		-- If EKF started, then 
			-- UpdateFilter
			-- Get rotation of body in NED
			-- if EKF is healthy
				-- Get euler angles
				updateEulerAngles();
				-- Update centi-degrees and trigonometric attitude values
				updateCdValues();
				updateTrig();
				-- Get gyro bias
				-- Get gyro estimate based on INS and bias
				-- Update accel and blended accel values  
	);
	
	public getGyro: () ==> Vector`Vector3
	getGyro() == (
		-- TODO: replace dummy call with sensor fusion.
		-- Convert from milli degrees to radians
		return Vector`divide(ins.getGyro(),AP_Math`RAD_TO_DEGX100*10);
	);
	
	public getAccelerationEfBlended : () ==> Vector`Vector3
	getAccelerationEfBlended() ==
	(
		-- TODO: replace dummy call with sensor fusion.
		-- convert from mg incl. gravity to g without gravity
		return Vector`subtract(Vector`divide(ins.getAccel(),1000), AP_Math`GRAVITY_MSS);
	);
	
	-- TODO: remove call. R&D cheat
	public getVelocity : () ==> Vector`Vector3
	getVelocity() ==
	(
		return gps.getVelocity();
	);
	
	-- TODO: remove call. R&D cheat
	public getGpsLocation : () ==> Navigation`Location
	getGpsLocation() ==
	return gps.getLocation();
	
	-- TODO: Use DCM_Matrix instead
	-- Calculate euler angles by integrating gyro velocities
	private updateEulerAngles: () ==> ()
	updateEulerAngles() ==
	(
		dcl gyroVel : Vector`Vector3 := getGyro(),
			timestep : real := ArduCopter`MAIN_LOOP_RATE;
		roll := AP_Math`wrap(roll + gyroVel.x * timestep, -MATH`pi, MATH`pi);
		pitch := AP_Math`wrap(pitch + gyroVel.y * timestep, -MATH`pi, MATH`pi);
		yaw := AP_Math`wrap(yaw + gyroVel.z * timestep, -MATH`pi, MATH`pi);
	);
	
	private updateCdValues: () ==> ()
	updateCdValues() == 
	(
		rollCd := AP_Math`radToCentiDegrees(roll);
		pitchCd := AP_Math`radToCentiDegrees(pitch);
		yawCd := AP_Math`radToCentiDegrees(yaw);
	);
	
	-- TODO: Use DCM_Matrix instead
	private updateTrig: () ==> ()
	updateTrig() ==
	(
		sinRoll := AP_Math`constrain(MATH`sin(roll), -1, 1);
		sinPitch := AP_Math`constrain(MATH`sin(pitch), -1, 1);
		sinYaw := AP_Math`constrain(MATH`sin(yaw), -1, 1);
		cosRoll := AP_Math`constrain(MATH`cos(roll), -1, 1);
		cosPitch := AP_Math`constrain(MATH`cos(pitch), -1, 1);
		cosYaw := AP_Math`constrain(MATH`cos(yaw), -1, 1);
	);

end AP_AHRS_NavEKF