class AP_Scheduler
-- Tasks included in the model:
--
--  { throttle_loop,         8,     45 },
--  { update_GPS,            8,     90 },
--  { update_batt_compass,  40,     72 },
--  { update_altitude,      40,    100 }, 
--  { run_nav_updates,       8,     80 }, Waypoint navigation/mission planner
--  { update_thr_average,   40,     10 }, Throttle average - used in position controller
--  { compass_accumulate,    8,     42 }, 

instance variables
	private runIntervalsMillis : seq1 of nat := [20, 20, 100, 100, 20, 100, 20];
	private runIntervalsNanos  : seq1 of nat := [runIntervalsMillis(i)*1000000 | i in set inds runIntervalsMillis];
	private lastRunTimes : seq of nat := [0,0,0,0,0,0,0];

	private arduCopter : ArduCopter;
	
operations
	-- Constructor
	public AP_Scheduler: ArduCopter ==> AP_Scheduler
	AP_Scheduler(copter) == (
		arduCopter := copter;
	);
	
	public run: () ==> ()
	run() == (
		throttle_loop();
		update_GPS();
		update_batt_compass();
		update_altitude();
		run_nav_updates();
		update_thr_average();
		compass_accumulate();
	);
	
	
	-- Operations to check if tasks should be run now:
	public throttle_loop: () ==> ()
	throttle_loop() == (
		if time >= (lastRunTimes(1) + runIntervalsNanos(1)) then
		(
			arduCopter.throttle_loop();
			lastRunTimes(1) := lastRunTimes(1) + runIntervalsNanos(1);
		)
	);
	
	public update_GPS: () ==> ()
	update_GPS() == (
		if time >= (lastRunTimes(2) + runIntervalsNanos(2)) then
		(
			arduCopter.update_GPS();
			lastRunTimes(2) := lastRunTimes(2) + runIntervalsNanos(2);
		)
	);
	
	public update_batt_compass: () ==> ()
	update_batt_compass() == (
		if time >= (lastRunTimes(3) + runIntervalsNanos(3)) then
		(
			arduCopter.update_batt_compass();
			lastRunTimes(3) := lastRunTimes(3) + runIntervalsNanos(3);
		)
	);
	
	public update_altitude: () ==> ()
	update_altitude() == (
		if time >= (lastRunTimes(4) + runIntervalsNanos(4)) then
		(	
			arduCopter.update_altitude();
			lastRunTimes(4) := lastRunTimes(4) + runIntervalsNanos(4);
		)
	);
	
	
	public run_nav_updates: () ==> ()
	run_nav_updates() == (
		if time >= (lastRunTimes(5) + runIntervalsNanos(5)) then
		(
			arduCopter.run_nav_updates();
			lastRunTimes(5) := lastRunTimes(5) + runIntervalsNanos(5);
		)
	);
	
	public update_thr_average: () ==> ()
	update_thr_average() == (
		if time >= (lastRunTimes(6) + runIntervalsNanos(6)) then
		(
			arduCopter.update_thr_average();
			lastRunTimes(6) := lastRunTimes(6) + runIntervalsNanos(6);
		)
	);
	
	public compass_accumulate: () ==> ()
	compass_accumulate() == (
		if time >= (lastRunTimes(7) + runIntervalsNanos(7)) then
		(
			arduCopter.compass_accumulate();
			lastRunTimes(7) := lastRunTimes(7) + runIntervalsNanos(7);
		)
	);

end AP_Scheduler