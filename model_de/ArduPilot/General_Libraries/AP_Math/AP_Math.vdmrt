class AP_Math

values
	-- Degrees/radians convertion 
	DEG_TO_RAD = 0.0174532925199432954743716805978692718781530857086181640625;
	RAD_TO_DEG = 57.29577951308232286464772187173366546630859375;
	public RAD_TO_DEGX100 = RAD_TO_DEG*100; -- centi-degrees
	
	-- Lattitude/longitude to cm
	public LATLON_TO_CM = 1.113195;
	-- Acceleration due to gravity in m/s/s
	public GRAVITY_MSS : real  = 0.0; -- sdp
functions
	-- Convert degrees to radians 
	public static radians : real -> real
	radians(degrees) == degrees * DEG_TO_RAD;
	
	-- Convert radians to degrees
	public static degrees : real -> real
	degrees(radians) == radians * RAD_TO_DEG;
	
	-- Convert from radians to centi-degrees
	public static radToCentiDegrees : real -> real
	radToCentiDegrees(radians) == radians * RAD_TO_DEGX100;
	
	public static centiDegreesToRad : real -> real
	centiDegreesToRad(degrees) == degrees / RAD_TO_DEGX100;
	
	-- Find minimum
	-- Is implicit function declarations not debug-able?
	--public static min (numbers:set of real) minimum: real
	--post minimum in set numbers and forall number in set numbers &
	--			minimum <= number;
	public static min : set of real -> real
	min(numbers) ==
		let min in set numbers be st
			forall number in set numbers &
				min <= number in
					min;
	
	-- Find maximum	
	--public static max (numbers:set of real) maximum: real
	--post maximum in set numbers and forall number in set numbers &
	--			maximum >= number;
	public static max : set of real -> real
	max(numbers) ==
		let max in set numbers be st
			forall number in set numbers &
				max >= number in
					max;
	
	-- Constrain value 
	public static constrain: real * real * real -> real
	constrain(value, min, max) ==
		if value < min then
			min
		elseif value > max then 
			max
		else
			value
		pre min <= max;
	
	public static wrap: real * real * real -> real
	wrap(value, min, max) ==
		if value < min then
			if value + (max-min) < min then
				wrap(value + (max-min), min, max)
			else 
				value + (max-min)
		else if value > max then
			if value - (max-min) > max then
				wrap(value - (max-min), min, max)
			else
				value - (max-min)
		else 
			value
		measure wrapMeasure;
	
	public wrap90 : real -> real
	wrap90(value) == wrap(value, -90, 90);
		
	public wrap180 : real -> real
	wrap180(value) == wrap(value, -180, 180);
	
	public wrap180Cd : real -> real
	wrap180Cd(value) == wrap(value, -18000, 18000);
		
	-- The absolute value must be smaller, at least for cases where min = -max.
	private wrapMeasure : real * real * real -> nat
	wrapMeasure(value, -, -) == floor(abs(value));
	
	public static safeSqrt : real -> real
	safeSqrt(x) ==
		if x < 0 then
			0
		else
			MATH`sqrt(x);
			
	public static norm : real * real -> real
	norm(x,y) ==
		MATH`sqrt(x**2+y**2);
end AP_Math