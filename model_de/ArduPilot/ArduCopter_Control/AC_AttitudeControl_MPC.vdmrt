class AC_AttitudeControl_MPC is subclass of AC_AttitudeControl

instance variables
	midaco : lib_MidacoWrapperProxy;
	-- Control signals
	U_roll : real := 0;
	U_pitch : real := 0;
	U_yaw : real := 0;
	-- Updateable matrices
	f : Matrix`matrix := Matrix`zero(p,1);
	-- State variables
	x : Matrix`matrix := [[0],[0],[0],[0],[0],[0]];
	dx : Matrix`matrix := [[0],[0],[0],[0],[0],[0]];
	y : Matrix`matrix := [[0],[0],[0]];
operations
	public AC_AttitudeControl_MPC : AP_AHRS * AP_Motors  ==> AC_AttitudeControl_MPC
	AC_AttitudeControl_MPC(ahr, motor) == (
		ahrs := ahr;
		motors := motor;
		
		midaco := new lib_MidacoWrapperProxy();
		midaco.init();
	);
		
	public update : real * real * real * real ==> ()
	update(rollTarget,pitchTarget,yawTarget,smoothingGain) == 
	(
		updateState();
		
		updateMatrices(AP_Math`centiDegreesToRad(rollTarget), AP_Math`centiDegreesToRad(pitchTarget), AP_Math`centiDegreesToRad(yawTarget));
		
		--if ArduCopter`MAIN_LOOP_RATE = 0.0025 then -- 400 Hz
		--	let controlChanges : (real * real * real) = midaco.solve(mk_(K_seq_400,Matrix`asSequence(f))) in
		--	outputToMotors(controlChanges)
		--else -- 100 Hz
			let controlChanges : (real * real * real) = midaco.solve(mk_(K_seq_100,Matrix`asSequence(f))) in
			outputToMotors(controlChanges);
	);
	
	-- Rate controllers is not used in MPC, only PID.	
	public rate_controller_run : () ==> ()
	rate_controller_run() == skip;
	
	private updateState : () ==> ()
	updateState() ==
	(
		-- Save old state
		dcl x_old : Matrix`matrix := x;
		-- Update state
		dcl vel : Vector`Vector3 := ahrs.getGyro();
		x :=[[ahrs.roll],[vel.x],[ahrs.pitch],[vel.y],[ahrs.yaw],[vel.z]];
		-- Calculate state change
		dx := Matrix`subtract( x,x_old );
		-- Update partial state				
		y := [[ahrs.roll],[ahrs.pitch],[ahrs.yaw]];
	);
	
	private updateMatrices : real * real * real ==> ()
	updateMatrices(rollTarget, pitchTarget, yawTarget) ==
	(
		dcl f_tuple : (real * real * real);
		f_tuple := midaco.calculate_f(mk_(Matrix`asSequence(dx),Matrix`asSequence(y),[rollTarget,pitchTarget,yawTarget]));
		f := [[f_tuple.#1],[f_tuple.#2],[f_tuple.#3]];
	);
	
	private outputToMotors : (real * real * real) ==> ()
	outputToMotors(controlChanges) ==
	(
		motors.setRoll(convertControlChangeToMotorsRange(controlChanges.#1));
		motors.setPitch(convertControlChangeToMotorsRange(controlChanges.#2));
		motors.setYaw(convertControlChangeToMotorsRange(controlChanges.#3)); -- *10? 
	);
	
	private convertControlChangeToMotorsRange : real ==> real
	convertControlChangeToMotorsRange(control) ==
	(
--		return control*80; --100 Hz
		return control*3000; --100 Hz
	);
	
		-- Return 321-intrinsic euler angles in centidegrees representing the rotation from NED earth frame to the
	-- attitude controller's target attitude.
	public getAttitudeTargetEulerCd : () ==> Vector`Vector3
	getAttitudeTargetEulerCd() == (
		return mk_Vector`Vector3(0.0,0.0,0.0);
	) 
	
values
	p : nat = 3; -- Number of variables in control signal
	
	-- Constant matrices exported from matlab: 	
	K_30_100Hz:	Matrix`matrix = [[0.0297],[0.0257],[0.0317]];
	K_30_400Hz:	Matrix`matrix = [[0.027919],[0.024633],[0.029512]];
	
	K_seq_100 : seq of real = Matrix`asSequence(K_30_100Hz);
	K_seq_400 : seq of real = Matrix`asSequence(K_30_400Hz)		
	
end AC_AttitudeControl_MPC