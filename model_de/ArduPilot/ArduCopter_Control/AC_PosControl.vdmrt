class AC_PosControl

instance variables
	ahrs : AP_AHRS;
	insNav : AP_InertialNav_NavEKF;
	motors : AP_Motors;
	attitudeControl : AC_AttitudeControl; 

	-- Hover throttle estimate
	throttleHover: real := 0;
	
	-- Controller variables is in cms:
	positionTarget	: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	positionError	: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	velocityTarget	: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	velocityDesired	: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	velocityError	: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	velocityLast	: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	accelTarget		: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	accelError		: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	accelFeedForward: Vector`Vector3 := mk_Vector`Vector3(0,0,0);
	
	-- Controllers
	pPosZ : AC_P := new AC_P(ALT_HOLD_P);
	pVelZ : AC_P := new AC_P(VEL_Z_P);
	pidAccelZ : AC_PID := new AC_PID(ACCEL_Z_P, ACCEL_Z_I, ACCEL_Z_D, ACCEL_Z_IMAX, ACCEL_Z_FILT_HZ, ArduCopter`MAIN_LOOP_RATE);
	
	--pPosXY : AC_P;
	--pidVelXY : AC_PID;
	
	-- Filters 
	velErrorFilter : LowPassFilter := new LowPassFilter();
	accelErrorFilter : LowPassFilter := new LowPassFilter();
	
	dt : real := ArduCopter`MAIN_LOOP_RATE;
	
operations
	public AC_PosControl : AP_AHRS * AP_InertialNav_NavEKF * AP_Motors * AC_AttitudeControl ==> AC_PosControl
	AC_PosControl(ahr, nav, motor, attControl) ==
	(
		ahrs := ahr;
		insNav := nav;
		motors := motor;
		attitudeControl := attControl;
		
		velErrorFilter.setCutoffFrequency(dt, POSCONTROL_VEL_ERROR_CUTOFF_FREQ);
		accelErrorFilter.setCutoffFrequency(dt, POSCONTROL_ACCEL_ERROR_CUTOFF_FREQ);
	);

	-- set climb rate target in cms
	public setAltTargetFromClimbRate : real ==> ()
	setAltTargetFromClimbRate(climbRateTarget) == 
	(
		positionTarget.z := positionTarget.z + climbRateTarget*dt;
		velocityDesired.z := climbRateTarget;
	);
	
	-- Update altitude controller
	public updateZController : () ==> ()
	updateZController() == 
	(
		posToRateZ();
		--IO`printf("Vel: %s, VelErr %s, Acc: %s, AccErr: %s.\n",[velocityTarget.z, velocityError.z,accelTarget.z, accelError.z]);
	);
	
	-- Position to rate control of altitude
	posToRateZ : () ==> ()
	posToRateZ() == 
	(
		-- Calculate altitiude error
		positionError.z := positionTarget.z - insNav.getAltitude();
		velocityTarget.z := SqrtController`sqrtController(positionError.z, pPosZ.getKp(), POSCONTROL_ACCEL_Z);
		
		rateToAccelZ();
	);
	
	-- Rate to acceleration control of altitude
	rateToAccelZ : () ==> ()
	rateToAccelZ() == 
	(
		-- Feedforward desired calculation 
		accelFeedForward.z := (velocityTarget.z - velocityLast.z)/dt;
		-- Store velocity
		velocityLast.z := velocityTarget.z;
		-- Calculate error and low pass filter
		velocityError.z := velErrorFilter.apply(velocityTarget.z - insNav.getVelocity().z);
		
		let desiredAccel : real = AP_Math`constrain(accelFeedForward.z + pVelZ.getP(velocityError.z), -32000, 32000) in
			accelToThrottle(desiredAccel);
	);
	
	-- Acceleration to throttle control of altitude
	accelToThrottle : real ==> ()
	accelToThrottle(accelTargetZ) == 
	(
		-- Calculate acceleration error
		let accelMeasuredZ : real = -(ahrs.getAccelerationEfBlended().z + AP_Math`GRAVITY_MSS) * 100 in
		(	-- Calculate and lowpass filter acceleration error
			accelError.z := accelErrorFilter.apply(AP_Math`constrain(accelTargetZ - accelMeasuredZ, -32000, 32000));
			accelTarget.z := ahrs.getAccelerationEfBlended().z;
		);		
		
		pidAccelZ.setInputFilterD(accelError.z);
		
		let throttleOut : real = AP_Math`max({pidAccelZ.getPID() + throttleHover, 1}) in
			attitudeControl.setThrottleOut(throttleOut, true);
	);
	
	public setThrottleHover : real ==> ()
	setThrottleHover(throttle) ==
	(
		throttleHover := throttle;
	);
	
values
	-- Controllers: 
	ALT_HOLD_P = 1;
	VEL_Z_P = 4;
	ACCEL_Z_P = 0.5;
	ACCEL_Z_I = 1;
	ACCEL_Z_D = 0;
	ACCEL_Z_IMAX = 800; 
	ACCEL_Z_FILT_HZ = 20;
	
	POSCONTROL_ACCEL_Z = 250;
	
	POSCONTROL_VEL_ERROR_CUTOFF_FREQ = 4;
	POSCONTROL_ACCEL_ERROR_CUTOFF_FREQ = 2;
	
end AC_PosControl