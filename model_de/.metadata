#
#Thu Aug 11 15:05:04 CEST 2016
AP_Baro.climbRate=real,variable
Matrix.initValue=_operation,sync
AP_AHRS.getHome=_operation,sync
VectorTest.TestCase=_operation,sync
AP_InertialNav_NavEKF.getLongitude=_operation,sync
Test.assertTrue=_operation,sync
AC_PosControl.setThrottleHover=_operation,sync
TestSuite.setName=_operation,sync
TestSuite.fail=_operation,sync
AP_AHRS_DCM.getGyro=_operation,sync
AP_NavEKF.baro=AP_Baro,class
MatrixTest.res10=seq of (real),const
Matrix.transpose=_operation,sync
TestSuite.runOnly=_operation,sync
AP_AHRS_DCM.update=_operation,sync
AP_MotorsQuad.RADIO_MIN=nat1,const
AC_AttitudeControl_PID.RATE_YAW_IMAX=nat1,const
MATH.srand2=_operation,sync
AP_Compass.count=real,variable
VectorTest.setUp=_operation,sync
AC_AttitudeControl_PID.update=_operation,sync
AC_PosControl.accelToThrottle=_operation,sync
DerivativeFilter.timestamps=seq of (real),variable
VectorTest.assertFalse=_operation,sync
AP_NavEKF.ahrs=AP_AHRS_NavEKF,class
TestSuite.getTestMethodNamed=_operation,sync
AP_AHRS_DCM.dcmUpdate=_operation,sync
AC_PID.checkFilter=_operation,sync
AP_AHRS.yawCd=real,variable
AssertionFailedError.hasMessage=_operation,sync
AP_AHRS.getGyro=_operation,sync
ArduCopter.baro=AP_Baro,class
AC_AttitudeControl_PID.RATE_ROLL_IMAX=nat1,const
AP_AHRS_DCM.baro=AP_Baro,class
AP_Baro.pressure=real,variable
TestListener.exitListener=_operation,sync
MatrixTest.getName=_operation,sync
ArduCopter.posController=AC_PosControl,class
AP_Scheduler.update_altitude=_operation,sync
AC_AttitudeControl_PID.pidRateRoll=AC_PID,class
AP_AHRS_NavEKF.updateTrig=_operation,sync
AP_AHRS.baro=AP_Baro,class
AP_Scheduler.arduCopter=ArduCopter,class
ArduCopter.ahrs=AP_AHRS_NavEKF,class
Matrix.multiplyScalar=_operation,sync
AP_AHRS_DCM.yawCd=real,variable
VectorTest.setName=_operation,sync
AP_Scheduler.AP_Scheduler=_operation,sync
TestCase.fail=_operation,sync
AP_Motors.yaw=real,variable
VectorTest.runOnly=_operation,sync
AC_P.kp=real,variable
AC_PosControl.dt=real,variable
AP_GPS.update=_operation,sync
MatrixTest.createResult=_operation,sync
Matrix.add=_operation,sync
TestCase.getName=_operation,sync
AC_PID.derivative=real,variable
DerivativeFilterTest.testSlopeTwo=_operation,sync
AP_Baro.altitude=real,variable
AC_PID.input=real,variable
Attitude.Attitude=_operation,sync
LowPassFilter.reset=_operation,sync
ArduCopterTest.Execute=_operation,sync
AP_AHRS_NavEKF.updateEulerAngles=_operation,sync
AP_Baro.lastTimestamp=nat,variable
Navigation.update=_operation,sync
MatrixTest.testAdd2=_operation,sync
Test.fName=seq of (char),variable
Navigation.calcHomeDistanceAndBearing=_operation,sync
AC_PID.getIntegrator=_operation,sync
AC_P.getKp=_operation,sync
ArduPilot=_system,systemclass
World.run=_operation,sync
AC_PosControl.POSCONTROL_ACCEL_ERROR_CUTOFF_FREQ=nat1,const
AC_AttitudeControl_PID.pidRateYaw=AC_PID,class
Navigation.ahrs=AP_AHRS,class
FlightMode.setWaypointTargets=_operation,sync
AP_AHRS_NavEKF.gps=AP_GPS,class
AC_AttitudeControl_PID.ACCEL_PITCH_MAX=nat1,const
DerivativeFilterTest.setName=_operation,sync
AC_PosControl.velErrorFilter=LowPassFilter,class
ArduCopter.USE_MPC=real,const
DerivativeFilterTest.runOnly=_operation,sync
AC_PosControl.VEL_Z_P=nat1,const
AC_AttitudeControl_PID.ahrs=AP_AHRS,class
AC_AttitudeControl_PID.RATE_PITCH_FILT_HZ=nat1,const
VectorTest.testAdd=_operation,sync
TestResult.endTest=_operation,sync
AP_MotorsQuad.throttle=real,variable
AC_AttitudeControl_MPC.updateState=_operation,sync
AC_AttitudeControl_MPC.U_yaw=real,variable
ArduCopter.MAIN_LOOP_RATE=real,const
DerivativeFilterTest.testLargeTimesteps=_operation,sync
TestCase.reflectionRunTest=_operation,sync
DerivativeFilterTest.createResult=_operation,sync
AP_MotorsQuad.applyThrustCurveAndVoltageScaling=_operation,sync
AP_Motors.getThrottle=_operation,sync
MatrixTest.m9=seq of (seq of (real)),const
MatrixTest.m8=seq of (seq of (real)),const
MatrixTest.m7=seq of (seq of (real)),const
FlightMode.climbRateTarget=real,variable
MatrixTest.m6=seq of (seq of (real)),const
MatrixTest.m5=seq of (seq of (real)),const
AP_AHRS_NavEKF.yaw=real,variable
MatrixTest.m4=seq of (seq of (real)),const
AP_MotorsQuad.voltage=real,variable
AP_MotorsQuad.motor4=real,variable
DerivativeFilterTest.fail=_operation,sync
MatrixTest.m2=seq of (seq of (real)),const
AP_MotorsQuad.motor3=real,variable
MatrixTest.m1=seq of (seq of (real)),const
AP_MotorsQuad.motor2=real,variable
AP_MotorsQuad.motor1=real,variable
IO.echo=_operation,sync
TestSuite.assertTrue=_operation,sync
PositionVector.locationToVector=_operation,sync
FlightMode.setMode=_operation,sync
AP_MotorsQuad.RADIO_MAX=nat1,const
AP_AHRS_NavEKF.sinYaw=real,variable
AP_Scheduler.update_GPS=_operation,sync
AC_AttitudeControl_MPC.update=_operation,sync
AP_Motors.output_armed=_operation,sync
AP_MotorsQuad.setYaw=_operation,sync
DerivativeFilterTest.assertTrue=_operation,sync
AP_BattMonitor.voltage=real,variable
TestListener.endTest=_operation,sync
Error.fMessage=seq of (char),variable
Navigation.homeBearing=real,variable
AP_AHRS_NavEKF.EKF=AP_NavEKF,class
AC_AttitudeControl_MPC.y=seq of (seq of (real)),variable
AC_AttitudeControl_MPC.x=seq of (seq of (real)),variable
AP_Motors.pitchFactor=seq of (real),variable
AC_AttitudeControl_MPC.p=nat,const
Navigation.runAutopilot=_operation,sync
AC_PosControl.ACCEL_Z_P=real,const
AP_AHRS_DCM.cosYaw=real,variable
AP_Scheduler.run_nav_updates=_operation,sync
AP_AHRS_NavEKF.AP_AHRS=_operation,sync
AC_PID.integrator=real,variable
AC_PosControl.ACCEL_Z_I=nat1,const
AC_AttitudeControl_MPC.f=seq of (seq of (real)),variable
AC_PID.kp=real,variable
AC_PosControl.ACCEL_Z_D=nat,const
AP_Motors.current=real,variable
AssertionFailedError.throw=_operation,sync
AC_PID.setInputFilterD=_operation,sync
AC_PID.ki=real,variable
AP_BattMonitor.AP_BattMonitor=_operation,sync
AP_Motors.roll=real,variable
AC_PID.setFiltHz=_operation,sync
TestListener.startTest=_operation,sync
AC_PID.kd=real,variable
AP_MotorsQuad.CLOCKWISE=int,const
AP_Baro.climbRateFilter=DerivativeFilter,class
LowPassFilter.setTimeConstant=_operation,sync
AP_AHRS_NavEKF.yawCd=real,variable
IO.print=_operation,sync
FlightMode.altholdUpdate=_operation,sync
AP_Scheduler.run=_operation,sync
AP_AHRS.sinYaw=real,variable
AP_AHRS_DCM.rollCd=real,variable
AC_AttitudeControl_PID.ACCEL_ROLL_MAX=nat1,const
DerivativeFilter.DerivativeFilter=_operation,sync
DerivativeFilter.FILTER_SIZE=nat,variable
Vector.add=_operation,sync
TestCase.tearDown=_operation,sync
AP_AHRS_DCM.AP_AHRS=_operation,sync
AP_Baro.AP_Baro=_operation,sync
AP_AHRS.cosPitch=real,variable
FlightMode.yawRateTarget=real,variable
FlightMode.pitchTarget=real,variable
MatrixTest.testMultiply=_operation,sync
Error.getMessage=_operation,sync
PositionVector.getBearingCd=_operation,sync
AP_AHRS_NavEKF.cosRoll=real,variable
AP_Scheduler.throttle_loop=_operation,sync
AC_AttitudeControl_PID.RATE_STAB_YAW_OVERSHOOT_ANGLE_MAX=nat1,const
AP_MotorsQuad.getThrottle=_operation,sync
LowPassFilter.apply=_operation,sync
AC_AttitudeControl_PID.RATE_PITCH_IMAX=nat1,const
ArduCopter.loop=_operation,sync
TestCase.assertFalse=_operation,sync
DerivativeFilterTest.assertFalse=_operation,sync
TestResult.run=_operation,sync
FilterWithBuffer.samples=seq of (real),variable
AP_Compass.accumulate=_operation,sync
TestResult.fRunTests=nat,variable
AP_AHRS.AP_AHRS=_operation,sync
MatrixTest.setName=_operation,sync
AP_AHRS_NavEKF.getAccelerationEfBlended=_operation,sync
AC_AttitudeControl_MPC.convertControlChangeToMotorsRange=_operation,sync
AC_AttitudeControl.getAngleBoost=_operation,sync
MatrixTest.assertTrue=_operation,sync
MatrixTest.runOnly=_operation,sync
AP_AHRS_NavEKF.dcmUpdate=_operation,sync
AP_AHRS_NavEKF.sinRoll=real,variable
ArduCopter.throttle_loop=_operation,sync
MatrixTest.tearDown=_operation,sync
ArduCopter.ins=AP_InertialSensor,class
AP_GPS.getLocation=_operation,sync
AC_AttitudeControl_PID.RATE_ROLL_P=real,const
AC_AttitudeControl_PID.angleEfRollPitchRateEfYawSmooth=_operation,sync
AC_AttitudeControl_PID.RATE_ROLL_I=real,const
AP_AHRS_NavEKF.pitchCd=real,variable
AC_AttitudeControl_PID.RATE_ROLL_D=real,const
TestRunner.collectTests=_operation,sync
AP_InertialSensor.accelZ=real,variable
TestCase.setName=_operation,sync
lib_MidacoWrapperProxy.calculate_f=_operation,sync
AC_AttitudeControl_MPC.dx=seq of (seq of (real)),variable
AP_InertialSensor.accelY=real,variable
AP_InertialSensor.accelX=real,variable
AP_InertialNav_NavEKF.getPosition=_operation,sync
AP_MotorsQuad.pitchFactor=seq of (real),variable
AP_MotorsQuad.COUNTERCLOCKWISE=nat1,const
TestCase.runOnly=_operation,sync
AC_AttitudeControl_MPC.midaco=lib_MidacoWrapperProxy,class
AP_AHRS_NavEKF.getGpsLocation=_operation,sync
AP_BattMonitor.compass=AP_Compass,class
AC_PID.getPI=_operation,sync
AC_PID.alpha=real,variable
AP_Motors.throttle=real,variable
AC_AttitudeControl_PID.RATE_RP_CONTROLLER_OUT_MAX=nat1,const
AssertionFailedError.Error=_operation,sync
TestListener.addError=_operation,sync
AP_AHRS_DCM.sinRoll=real,variable
AP_GPS.getVelocity=_operation,sync
AP_MotorsQuad.output_armed=_operation,sync
TestCase.createResult=_operation,sync
AP_AHRS.cosRoll=real,variable
DerivativeFilter.slope=_operation,sync
AP_AHRS_NavEKF.getVelocity=_operation,sync
AC_PID.dt=real,variable
MatrixTest.testAdd=_operation,sync
TestResult.toString=_operation,sync
ArduCopter.thread=_operation,sync
TestCase.TestCase=_operation,sync
MATH.pi=real,const
AP_Motors.pitch=real,variable
DerivativeFilterTest.testSlopeOneHalf=_operation,sync
AC_PID.AC_PID=_operation,sync
AP_AHRS.sinRoll=real,variable
TestSuite.testCount=_operation,sync
AP_Motors.setYaw=_operation,sync
TestSuite.addTest=_operation,sync
ArduCopter.update_altitude=_operation,sync
AP_Baro.CelciusToKelvin=real,const
Navigation.calcWayPointBearing=_operation,sync
AP_MotorsQuad.thrustCurveExpo=real,const
Navigation.homeDistance=real,variable
Navigation.calcPosition=_operation,sync
DerivativeFilterTest.run=_operation,sync
AP_MotorsQuad.current=real,variable
AC_AttitudeControl_PID.ACCEL_YAW_MAX=nat1,const
Navigation.posVec=PositionVector,class
AC_AttitudeControl_PID.ROLL_P=real,const
AP_Motors.getRollPitchLimit=_operation,sync
lib_MidacoWrapperProxy.solve=_operation,sync
lib_MidacoWrapperProxy.init=_operation,sync
Filter.reset=_operation,sync
MatrixTest.TestCase=_operation,sync
AP_Math.DEG_TO_RAD=real,const
AC_AttitudeControl_PID.updateEfPitchAngleAndError=_operation,sync
AP_MotorsQuad.THROTTLE_MIN=nat1,const
TestCase.setUp=_operation,sync
AP_GPS.locationAlt=real,variable
AC_AttitudeControl_PID.ANGLE_MAX=nat1,const
Error.throw=_operation,sync
AC_AttitudeControl_PID.YAW_P=nat1,const
AC_PID.resetFilter=bool,variable
DerivativeFilterTest.testSlopeOne=_operation,sync
AP_BattMonitor.current=real,variable
IO.printf=_operation,sync
ArduCopter.posVec=PositionVector,class
VectorTest.runBare=_operation,sync
Test.run=_operation,sync
TestResult.removeListener=_operation,sync
FlightMode.attitudeControl=AC_AttitudeControl,class
Navigation.calcWayPointDistance=_operation,sync
AC_PID.getP=_operation,sync
MatrixTest.testMultiply3=_operation,sync
MatrixTest.testMultiply2=_operation,sync
AP_GPS.grdSpd=real,variable
AC_PID.getPID=_operation,sync
AC_PID.getI=_operation,sync
AC_PID.getD=_operation,sync
IO.println=_operation,sync
AP_MotorsQuad.yaw=real,variable
AC_PosControl.throttleHover=real,variable
MatrixTest.resM8=seq of (seq of (real)),const
MatrixTest.resM7=seq of (seq of (real)),const
MatrixTest.resM6=seq of (seq of (real)),const
MatrixTest.resM5=seq of (seq of (real)),const
MatrixTest.resM4=seq of (seq of (real)),const
MatrixTest.resM3=seq of (seq of (real)),const
MatrixTest.resM2=seq of (seq of (real)),const
AC_AttitudeControl_PID.RATE_ROLL_FILT_HZ=nat1,const
AC_AttitudeControl_PID.updateEfYawAngleAndError=_operation,sync
TestSuite.TestSuite=_operation,sync
AP_InertialNav_NavEKF.getOrigin=_operation,sync
AP_Motors.maxMotors=nat,const
AP_AHRS_DCM.cosRoll=real,variable
TestSuite.testAt=_operation,sync
MatrixTest.fail=_operation,sync
AC_PosControl.ACCEL_Z_IMAX=nat1,const
AP_GPS.grdCrsCd=real,variable
AP_AHRS_DCM.ins=AP_InertialSensor,class
TestSuite.fTests=seq of (Test),variable
VectorTest.fail=_operation,sync
ArduCopter.attController=AC_AttitudeControl,class
Matrix.zero=_operation,sync
DerivativeFilterTest.runBare=_operation,sync
AC_AttitudeControl_PID.RATE_STAB_ROLL_OVERSHOOT_ANGLE_MAX=nat1,const
ArduCopter.compass=AP_Compass,class
AC_PID.filtHz=real,variable
Test.fail=_operation,sync
AC_PosControl.rateToAccelZ=_operation,sync
FlightMode.stabilizaUpdate=_operation,sync
LowPassFilter.baseValueSet=bool,variable
Matrix.subtract=_operation,sync
MatrixTest.assertFalse=_operation,sync
AC_AttitudeControl_PID.rateBfToMotorRoll=_operation,sync
AP_AHRS_DCM.pitchCd=real,variable
Navigation.insNav=AP_InertialNav_NavEKF,class
AC_AttitudeControl_PID.RATE_YAW_CONTROLLER_OUT_MAX=nat1,const
Vector.subtract=_operation,sync
ArduCopter.gps=AP_GPS,class
ArduCopter.run_nav_updates=_operation,sync
DerivativeFilter.newData=bool,variable
Attitude.insNav=AP_InertialNav_NavEKF,class
TestSuite.run=_operation,sync
AP_MotorsQuad.roll=real,variable
DerivativeFilter.lastSlope=real,variable
ArduCopter.insNav=AP_InertialNav_NavEKF,class
Error.Error=_operation,sync
AP_AHRS.pitchCd=real,variable
AP_Motors.yawFactor=seq of (real),variable
FilterWithBuffer.FILTER_SIZE=nat,variable
AC_AttitudeControl_PID.RATE_STAB_PITCH_OVERSHOOT_ANGLE_MAX=nat1,const
AP_Math.GRAVITY_MSS=real,const
TestSuite.tests=_operation,sync
AC_AttitudeControl_PID.frameConversionEfToBf=_operation,sync
AC_PosControl.ACCEL_Z_FILT_HZ=nat1,const
ArduCopter.update_batt_compass=_operation,sync
VectorTest.runTest=_operation,sync
AC_PosControl.posToRateZ=_operation,sync
AC_PosControl.updateZController=_operation,sync
VectorTest.assertTrue=_operation,sync
MatrixTest.row9=seq of (real),const
MatrixTest.row8=seq of (real),const
VectorTest.testDivide=_operation,sync
MatrixTest.row7=seq of (real),const
MatrixTest.row6=seq of (real),const
MatrixTest.row5=seq of (real),const
AP_AHRS_NavEKF.update=_operation,sync
MatrixTest.row4=seq of (real),const
DerivativeFilter.reset=_operation,sync
MatrixTest.row3=seq of (real),const
AC_AttitudeControl_PID.RATE_PITCH_P=real,const
MatrixTest.row2=seq of (real),const
AP_Scheduler.update_batt_compass=_operation,sync
MatrixTest.row1=seq of (real),const
AP_Motors.setRoll=_operation,sync
AC_PosControl.attitudeControl=AC_AttitudeControl,class
ArduCopter.update_GPS=_operation,sync
AC_AttitudeControl_PID.RATE_PITCH_I=real,const
ArduPilot.cpu=CPU,class
AP_MotorsQuad.THROTTLE_MAX=nat1,const
AC_AttitudeControl_PID.RATE_PITCH_D=real,const
AssertionFailedError.fMessage=seq of (char),variable
FlightMode.posControl=AC_PosControl,class
Filter.apply=_operation,sync
AP_AHRS.getAccelerationEfBlended=_operation,sync
PositionVector.insNav=AP_InertialNav_NavEKF,class
ArduCopter.ArduCopter=_operation,sync
AP_Motors.getYawLimit=_operation,sync
DerivativeFilterTest.setUp=_operation,sync
AP_AHRS.ins=AP_InertialSensor,class
AP_MotorsQuad.addMotor=_operation,sync
TestResult.runProtected=_operation,sync
AP_InertialNav_NavEKF.ahrs=AP_AHRS_NavEKF,class
TestListener.addFailure=_operation,sync
AC_PosControl.insNav=AP_InertialNav_NavEKF,class
AP_Math.RAD_TO_DEG=real,const
AP_GPS.groundCourseCd=real,variable
Test.getName=_operation,sync
AP_MotorsQuad.THROTTLE_HOVER=nat1,const
AP_MotorsQuad.setVoltage=_operation,sync
AP_InertialSensor.getGyro=_operation,sync
AP_Scheduler.lastRunTimes=seq of (nat),variable
AP_BattMonitor.read=_operation,sync
Test.assertFalse=_operation,sync
DerivativeFilterTest.runTest=_operation,sync
AC_PosControl.ahrs=AP_AHRS,class
FlightMode.update=_operation,sync
AP_InertialNav_NavEKF.getLattitude=_operation,sync
AC_AttitudeControl_PID.RATE_YAW_P=real,const
AC_PosControl.POSCONTROL_ACCEL_Z=nat1,const
TestResult.errorCount=_operation,sync
AP_AHRS.update=_operation,sync
AC_AttitudeControl_PID.RATE_YAW_I=real,const
VectorTest.createResult=_operation,sync
FilterWithBuffer.reset=_operation,sync
AC_AttitudeControl_PID.RATE_YAW_D=nat,const
MatrixTest.runBare=_operation,sync
DerivativeFilterTest.testSlopMinusOne=_operation,sync
ArduCopter.navigation=Navigation,class
AP_Math.LATLON_TO_CM=real,const
AC_PosControl.accelErrorFilter=LowPassFilter,class
AC_AttitudeControl_PID.AC_AttitudeControl_PID=_operation,sync
Assert.assertTrue=_operation,sync
MATH.rand=_operation,sync
AP_AHRS_DCM.sinYaw=real,variable
TestCase.runBare=_operation,sync
AP_AHRS_DCM.sinPitch=real,variable
Attitude.updateThresholdAverage=_operation,sync
AP_Baro.basePressure=real,const
AP_InertialSensor.gyroRateZ=real,variable
AP_InertialSensor.gyroRateY=real,variable
AP_InertialSensor.gyroRateX=real,variable
AssertionFailedError.getMessage=_operation,sync
AC_AttitudeControl_MPC.AC_AttitudeControl_MPC=_operation,sync
AP_InertialNav_NavEKF.getVelocity=_operation,sync
ArduCopter.attitude=Attitude,class
AC_AttitudeControl.motors=AP_Motors,class
AP_GPS.locationLong=real,variable
AC_AttitudeControl_MPC.rate_controller_run=_operation,sync
AP_AHRS_DCM.gps=AP_GPS,class
Matrix.multiply=_operation,sync
FlightMode.FlightMode=_operation,sync
DerivativeFilterTest.tearDown=_operation,sync
AP_MotorsQuad.getYawLimit=_operation,sync
MatrixTest.testAsSequence=_operation,sync
AC_P.getP=_operation,sync
AP_Motors.setVoltage=_operation,sync
Matrix.asSequence=_operation,sync
AP_AHRS_DCM.yaw=real,variable
AC_AttitudeControl_PID.rateBfToMotorPitch=_operation,sync
MatrixTest.run=_operation,sync
AP_MotorsQuad.thrustCurveMax=real,const
TYPE_CHECK_STATUS=true
AC_AttitudeControl_PID.PITCH_P=real,const
AssertionFailedError.AssertionFailedError=_operation,sync
AC_AttitudeControl_PID.motors=AP_Motors,class
VectorTest.run=_operation,sync
TestResult.startTest=_operation,sync
TestSuite.createTests=_operation,sync
AC_AttitudeControl_MPC.updateMatrices=_operation,sync
FlightMode.waypointRun=_operation,sync
DerivativeFilter.apply=_operation,sync
VectorTest.testAdd3=_operation,sync
AP_AHRS_NavEKF.sinPitch=real,variable
AC_PosControl.pVelZ=AC_P,class
AP_AHRS_NavEKF.roll=real,variable
AC_AttitudeControl_PID.pAngleYaw=AC_P,class
AP_MotorsQuad.setRoll=_operation,sync
PositionVector.PositionVector=_operation,sync
AC_AttitudeControl_PID.rate_controller_run=_operation,sync
AP_BattMonitor.motors=AP_Motors,class
AC_AttitudeControl.rate_controller_run=_operation,sync
AP_Compass.read=_operation,sync
AP_GPS.locationLat=real,variable
VectorTest.testAddMinus=_operation,sync
AP_InertialNav_NavEKF.AP_InertialNav_NavEKF=_operation,sync
MatrixTest.runTest=_operation,sync
AC_PosControl.withinBounds=_operation,sync
AC_AttitudeControl_MPC.U_pitch=real,variable
AP_MotorsQuad.output=_operation,sync
AC_PID.setInputFilterAll=_operation,sync
AC_AttitudeControl_MPC.K_30_100Hz=seq of (seq of (real)),const
TestCase.runTest=_operation,sync
Assert.fail=_operation,sync
DerivativeFilter.update=_operation,sync
AC_PosControl.pPosZ=AC_P,class
AP_Scheduler.update_thr_average=_operation,sync
AP_InertialNav_NavEKF.update=_operation,sync
AP_AHRS_NavEKF.rollCd=real,variable
AC_PID.resetI=_operation,sync
AC_PID.calcAlpha=_operation,sync
AP_Baro.getClimbRate=_operation,sync
AC_AttitudeControl_MPC.setThrottleOut=_operation,sync
FilterWithBuffer.apply=_operation,sync
AP_AHRS.gps=AP_GPS,class
FlightMode.smoothingGain=real,variable
AC_AttitudeControl_MPC.outputToMotors=_operation,sync
AC_PosControl.AC_PosControl=_operation,sync
AP_AHRS.pitch=real,variable
TestSuite.getName=_operation,sync
DerivativeFilter.FilterWithBuffer=_operation,sync
ArduPilot.arduCopter=ArduCopter,class
FilterWithBuffer.FilterWithBuffer=_operation,sync
DerivativeFilter.getFilterSize=_operation,sync
AP_NavEKF.AP_NavEKF=_operation,sync
AP_InertialNav_NavEKF.getAltitude=_operation,sync
Error.hasMessage=_operation,sync
ArduCopter.fltMode=FlightMode,class
IO.ferror=_operation,sync
Test.setName=_operation,sync
TestResult.fErrors=seq of (unknown),variable
Navigation.Navigation=_operation,sync
Test.runOnly=_operation,sync
Attitude.motors=AP_Motors,class
ArduCopter.update_thr_average=_operation,sync
TestResult.addError=_operation,sync
AP_MotorsQuad.setPitch=_operation,sync
AP_MotorsQuad.setCurrent=_operation,sync
AP_AHRS.yaw=real,variable
ArduCopter.motors=AP_MotorsQuad,class
AP_MotorsQuad.AP_MotorsQuad=_operation,sync
Navigation.fltMode=FlightMode,class
PositionVector.scaleLongitude=real,variable
AC_PosControl.ALT_HOLD_P=nat1,const
TestResult.wasSuccessful=_operation,sync
AP_AHRS_DCM.pitch=real,variable
AP_MotorsQuad.yawFactor=seq of (real),variable
AP_AHRS.rollCd=real,variable
IO.fecho=_operation,sync
TestCase.run=_operation,sync
AP_Motors.voltage=real,variable
AC_AttitudeControl_MPC.K_30_400Hz=seq of (seq of (real)),const
AP_MotorsQuad.getRollPitchLimit=_operation,sync
TestCase.assertTrue=_operation,sync
ArduCopter.fastLoop=_operation,sync
MATH.srand=_operation,sync
AC_AttitudeControl_MPC.K_seq_100=seq of (real),const
AP_InertialSensor.getAccel=_operation,sync
AP_MotorsQuad.rollFactor=seq of (real),variable
VectorTest.getName=_operation,sync
AC_AttitudeControl_MPC.motors=AP_Motors,class
AC_AttitudeControl_PID.updateEfRollAngleAndError=_operation,sync
DerivativeFilter.samples=seq of (real),variable
MatrixTest.resM=seq of (seq of (real)),const
AC_PosControl.pidAccelZ=AC_PID,class
ArduCopter.battMon=AP_BattMonitor,class
AC_AttitudeControl.setThrottleOut=_operation,sync
AC_PosControl.motors=AP_Motors,class
FlightMode.waypointTargets=seq of (unknown),variable
AP_Motors.setThrottle=_operation,sync
AP_Baro.temperature=real,variable
ArduCopter.scheduler=AP_Scheduler,class
AP_Scheduler.compass_accumulate=_operation,sync
AP_AHRS_NavEKF.cosYaw=real,variable
AP_InertialSensor.read=_operation,sync
MatrixTest.res9=seq of (real),const
LowPassFilter.baseValue=real,variable
MatrixTest.res8=seq of (real),const
MatrixTest.res7=seq of (real),const
AC_P.AC_P=_operation,sync
TestRunner.run=_operation,sync
MatrixTest.res6=seq of (real),const
MatrixTest.res5=seq of (real),const
MatrixTest.res4=seq of (real),const
MatrixTest.res3=seq of (real),const
AP_AHRS_NavEKF.baro=AP_Baro,class
MatrixTest.res2=seq of (real),const
AP_MotorsQuad.pitch=real,variable
AP_AHRS_DCM.roll=real,variable
MatrixTest.res1=seq of (real),const
AP_AHRS_DCM.cosPitch=real,variable
TestResult.addListener=_operation,sync
TestResult.failureCount=_operation,sync
VectorTest.tearDown=_operation,sync
AP_AHRS.roll=real,variable
AP_AHRS_NavEKF.updateCdValues=_operation,sync
AP_Motors.setCurrent=_operation,sync
AC_AttitudeControl_PID.pAngleRoll=AC_P,class
MatrixTest.testMultiplyScalar=_operation,sync
AP_AHRS_NavEKF.ins=AP_InertialSensor,class
DerivativeFilterTest.getName=_operation,sync
TestResult.runCount=_operation,sync
AC_AttitudeControl_PID.pAnglePitch=AC_P,class
ArduCopter.compass_accumulate=_operation,sync
AC_AttitudeControl_PID.setThrottleOut=_operation,sync
FilterWithBuffer.getFilterSize=_operation,sync
AP_AHRS_NavEKF.getHome=_operation,sync
AC_PosControl.POSCONTROL_VEL_ERROR_CUTOFF_FREQ=nat1,const
DerivativeFilterTest.TestCase=_operation,sync
VectorTest.testMultiply=_operation,sync
AP_GPS.groundSpeed=real,variable
AC_AttitudeControl_PID.RATE_YAW_FILT_HZ=nat1,const
AC_AttitudeControl_PID.rateBfToMotorYaw=_operation,sync
AP_Motors.output=_operation,sync
TestResult.fFailures=seq of (AssertionFailedError),variable
TestResult.addFailure=_operation,sync
Assert.assertFalse=_operation,sync
AC_AttitudeControl.ahrs=AP_AHRS,class
AP_AHRS.cosYaw=real,variable
Attitude.throttleAverage=real,variable
FlightMode.getMode=_operation,sync
AP_Math.RAD_TO_DEGX100=real,const
AP_Motors.rollFactor=seq of (real),variable
AC_PosControl.setAltTargetFromClimbRate=_operation,sync
Attitude.posControl=AC_PosControl,class
AP_Baro.read=_operation,sync
AC_AttitudeControl_PID.pidRatePitch=AC_PID,class
AP_AHRS_DCM.getAccelerationEfBlended=_operation,sync
PositionVector.ahrs=AP_AHRS,class
Navigation.calcDistanceAndBearing=_operation,sync
AP_GPS.velocityZ=real,variable
AP_GPS.velocityY=real,variable
AP_GPS.velocityX=real,variable
AP_AHRS_NavEKF.pitch=real,variable
AC_AttitudeControl.update=_operation,sync
AP_AHRS_NavEKF.getGyro=_operation,sync
AC_AttitudeControl_PID.updateRateBfTarget=_operation,sync
AP_MotorsQuad.bestThrottle=_operation,sync
AP_AHRS_NavEKF.AP_AHRS_NavEKF=_operation,sync
AP_AHRS_DCM.getHome=_operation,sync
AC_AttitudeControl_MPC.K_seq_400=seq of (real),const
AC_AttitudeControl_MPC.ahrs=AP_AHRS,class
World.block=_operation,sync
AP_AHRS_NavEKF.cosPitch=real,variable
TestSuite.assertFalse=_operation,sync
MatrixTest.setUp=_operation,sync
FlightMode.pilote_desired_throttle=real,variable
FlightMode.rollTarget=real,variable
TestListener.initListener=_operation,sync
DerivativeFilterTest.FILTER_SIZE=nat1,const
AP_Motors.setPitch=_operation,sync
AC_AttitudeControl_MPC.U_roll=real,variable
AC_PID.iMax=real,variable
AC_PID.AC_PID_FILT_HZ_MIN=real,const
LowPassFilter.setCutoffFrequency=_operation,sync
AP_MotorsQuad.setThrottle=_operation,sync
LowPassFilter.alpha=real,variable
AP_AHRS.sinPitch=real,variable
