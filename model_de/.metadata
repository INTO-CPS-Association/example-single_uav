#
#Tue Aug 16 17:10:36 CEST 2016
Test.fail=_operation,sync
AssertionFailedError.Error=_operation,sync
TestSuite.setName=_operation,sync
TestCase.TestCase=_operation,sync
FlightController.throttleTarget=real,variable
TestResult.endTest=_operation,sync
UAV.gyroscope=Gyroscope,class
PID.lastErr=real,variable
TestSuite.testCount=_operation,sync
P.kP=real,variable
FlightController.positionController=PositionControl,class
MotorController.setThrottle=_operation,sync
FlightController.pController=P,class
GPS.velocityZ=real,variable
GPS.velocityY=real,variable
GPS.velocityX=real,variable
IO.fecho=_operation,sync
TestResult.toString=_operation,sync
Test.run=_operation,sync
TestCase.setName=_operation,sync
FlightController.altitudeHold=_operation,sync
FlightController.update=_operation,sync
SDPs.GRAVITY_MSS=real,const
Motor.setThrottle=_operation,sync
Gyroscope.velocityRoll=real,variable
Assert.assertTrue=_operation,sync
SF_GPS.getVelocity=_operation,sync
TestCase.setUp=_operation,sync
TestResult.fFailures=seq of (AssertionFailedError),variable
TestSuite.assertFalse=_operation,sync
FlightController.waypointRun=_operation,sync
TestResult.errorCount=_operation,sync
TestSuite.TestSuite=_operation,sync
Gyroscope.getVelocity=_operation,sync
UAVPilot=_system,systemclass
TestResult.fRunTests=nat,variable
PositionControl.pController=P,class
TestListener.exitListener=_operation,sync
FlightController.runFullUpdate=_operation,sync
AssertionFailedError.hasMessage=_operation,sync
GPS.update=_operation,sync
FlightController.HOLD_ALTITUDE_THROTTLE=nat1,const
SDPs.USE_MPC=real,const
Gyroscope.update=_operation,sync
UAV.thread=_operation,sync
FlightController.FlightController=_operation,sync
PositionControl.update=_operation,sync
UAV.MAIN_LOOP_RATE=real,const
TestSuite.getName=_operation,sync
IO.printf=_operation,sync
TestCase.tearDown=_operation,sync
FlightController.setWaypointTargets=_operation,sync
PID.update=_operation,sync
TestListener.endTest=_operation,sync
PositionControl.HOLD_ALTITUDE_THROTTLE=nat1,const
SF_GPS.GPS=GPS,class
Barometer.Barometer=_operation,sync
TestResult.runCount=_operation,sync
P.P=_operation,sync
Error.getMessage=_operation,sync
PositionControl.sensorData=SF_GPS,class
TestCase.getName=_operation,sync
Test.setName=_operation,sync
PositionControl.PID_P=nat1,const
TestCase.reflectionRunTest=_operation,sync
TestSuite.addTest=_operation,sync
TestRunner.run=_operation,sync
PositionControl.PID_I=real,const
TestResult.runProtected=_operation,sync
TestSuite.tests=_operation,sync
PositionControl.PID_D=nat1,const
PositionControl.PositionControl=_operation,sync
PID.targetPoint=real,variable
Error.Error=_operation,sync
PositionControl.setTargetPosition=_operation,sync
TestSuite.fTests=seq of (Test),variable
TestListener.startTest=_operation,sync
PID.kP=real,variable
TestSuite.runOnly=_operation,sync
TestListener.addFailure=_operation,sync
GPS.locationAlt=real,variable
PID.setTargetPoint=_operation,sync
PID.kI=real,variable
UAV.flightController=FlightController,class
PID.kD=real,variable
FlightController.FULL_THROTTLE=nat1,const
FlightController.motorCrtl=MotorController,class
FlightController.waypointTargets=seq of (unknown),variable
GPS.getLocation=_operation,sync
TestCase.fail=_operation,sync
Motor.throttle=real,variable
IO.echo=_operation,sync
UAV.accelerometer=Accelerometer,class
TestResult.wasSuccessful=_operation,sync
IO.print=_operation,sync
TestSuite.run=_operation,sync
TestCase.runOnly=_operation,sync
PositionControl.MAX_TOP_THROTTLE_GAIN=int,const
TestResult.removeListener=_operation,sync
Gyroscope.velocityPitch=real,variable
MotorController.runMotorCommand=_operation,sync
TestSuite.assertTrue=_operation,sync
TestResult.addError=_operation,sync
AssertionFailedError.throw=_operation,sync
P.setTargetPoint=_operation,sync
Gyroscope.velocityYaw=real,variable
TestSuite.getTestMethodNamed=_operation,sync
Assert.fail=_operation,sync
FlightController.P_GAIN_VALUE_THROTTLE=nat1,const
FlightController.setAltitudeTarget=_operation,sync
TestResult.failureCount=_operation,sync
UAVPilot.cpu=CPU,class
Test.getName=_operation,sync
AssertionFailedError.getMessage=_operation,sync
TestCase.runTest=_operation,sync
TestCase.run=_operation,sync
TestCase.assertFalse=_operation,sync
TestResult.startTest=_operation,sync
IO.ferror=_operation,sync
FlightController.setMode=_operation,sync
FlightController.maintainThrottle=_operation,sync
UAVPilot.uav=UAV,class
Magnetometer.Magnetometer=_operation,sync
TYPE_CHECK_STATUS=true
PID.intErr=real,variable
PositionControl.pidController=PID,class
FlightController.positionHold=_operation,sync
UAV.gps=GPS,class
Accelerometer.getAcceleration=_operation,sync
SF_GPS.getPosition=_operation,sync
TestSuite.createTests=_operation,sync
Test.fName=seq of (char),variable
GPS.locationLong=real,variable
Accelerometer.accelerometerZ=real,variable
GPS.locationLat=real,variable
Accelerometer.accelerometerY=real,variable
Accelerometer.accelerometerX=real,variable
UAV.UAV=_operation,sync
IO.println=_operation,sync
Test.assertFalse=_operation,sync
SF_GPS.SF_GPS=_operation,sync
Error.hasMessage=_operation,sync
P.targetPoint=real,variable
AssertionFailedError.fMessage=seq of (char),variable
MotorController.motor4=Motor,class
TestCase.createResult=_operation,sync
MotorController.motor3=Motor,class
MotorController.motor2=Motor,class
TestResult.run=_operation,sync
Assert.assertFalse=_operation,sync
MotorController.motor1=Motor,class
Test.runOnly=_operation,sync
AssertionFailedError.AssertionFailedError=_operation,sync
TestSuite.fail=_operation,sync
Accelerometer.update=_operation,sync
Test.assertTrue=_operation,sync
PositionControl.withinBounds=_operation,sync
TestListener.addError=_operation,sync
UAV.loop=_operation,sync
FlightController.setThrottle=_operation,sync
TestResult.addListener=_operation,sync
PositionControl.FULL_THROTTLE=nat1,const
TestCase.runBare=_operation,sync
TestSuite.testAt=_operation,sync
P.getP=_operation,sync
PID.dt=real,variable
TestResult.addFailure=_operation,sync
Error.fMessage=seq of (char),variable
TestListener.initListener=_operation,sync
PositionControl.P_GAIN_VALUE_THROTTLE=nat1,const
PositionControl.getPosition=_operation,sync
MotorController.MotorController=_operation,sync
PID.PID=_operation,sync
World.run=_operation,sync
TestCase.assertTrue=_operation,sync
World.block=_operation,sync
TestRunner.collectTests=_operation,sync
TestResult.fErrors=seq of (unknown),variable
GPS.getVelocity=_operation,sync
Error.throw=_operation,sync
