class FlightController
types
	-- Waypoint makes the drone automatically fly to waypoints.
	-- MANUAL depends on pilot controls e.g. roll, pitch, yaw, throttle
	-- ALT_HOLD holds the altitude (Z position).
	-- POSHOLD holds X,Y, and Z position.
	public MODE = <WAYPOINT> | <MANUAL> | <ALT_HOLD> | <POS_HOLD> | <THROTTLE_HOLD>;
instance variables
	motorCrtl : MotorController;
	mode : MODE := <ALT_HOLD>;
	throttleTarget : real := 0; -- For THROTTLE_HOLD
	targetPosition : Types`Vector3; -- For ALT_HOLD
	positionController : PositionControl;
	waypointTargets : seq of Types`Vector3;
operations
	public FlightController : MotorController * SF_GPS ==> FlightController
	FlightController(mc, sensorData) == (
		motorCrtl := mc;
		positionController := new PositionControl(sensorData);
		IO`println("FlightController not connected");
	);
	
	public update : () ==> ()
	update() ==	(
		cases mode :
			<WAYPOINT> -> waypointRun(),
			<MANUAL> ->  IO`println("MANUAL NOT IMPLEMENTED"),
			<ALT_HOLD> -> altitudeHold(),
			<POS_HOLD> -> positionHold(),
			<THROTTLE_HOLD> ->  maintainThrottle()
		end
	);
		
	public setMode : MODE ==> ()
	setMode(modePar) == mode := modePar; 
	
	public setThrottle : real ==> ()
	setThrottle(throttle) == throttleTarget := throttle;
	
	public setAltitudeTarget : Types`Vector3 ==> ()
	setAltitudeTarget(targetPos) == (
		positionController.setTargetPosition(targetPos);
		targetPosition := targetPos;
	);
	
	public setWaypointTargets : seq of Types`Vector3 ==> ()
	setWaypointTargets(wps) == (
		targetPosition := hd wps;
		waypointTargets := tl wps;
		positionController.setTargetPosition(targetPosition);
	);
	
	waypointRun : () ==> ()
	waypointRun() == (
			if positionController.withinBounds(positionController.getPosition(), targetPosition)
			then(
				if waypointTargets <> []
				then (
					setWaypointTargets(waypointTargets);
					runFullUpdate();		
				)
				else (
					setMode(<POS_HOLD>);
					update();
				)
			)
			else
				runFullUpdate();
	);
	
	runFullUpdate : () ==> ()
	runFullUpdate() == 		
		let motorCmd = positionController.update() in
			motorCrtl.runMotorCommand(motorCmd);	
	 
	positionHold : () ==> ()
	positionHold() == 
		runFullUpdate();	
	
	altitudeHold : () ==> ()
	altitudeHold() == (
		runFullUpdate();		
	);
	
	maintainThrottle : () ==> ()
	maintainThrottle() == (
		motorCrtl.runMotorCommand(mk_Types`MotorCommand(0,0,0,throttleTarget));
	);
functions
end FlightController